8 regs 16 bit, 15-bit word addresses, 8x32k banked address space (words)

PSW   R0(=0)
R1    R2
R3    R4
R5    LR(R6)
      PC(R7)

PSW: C, Z, N, V, I, AAA <- LWA dest, BBBBBBBB <- Bank number
PC: LSB is 0 -> Bank zero, Bank B from PSW else

Fetch: PC -> MAR, PC -> ALU0, 1 -> ALU1, ADD -> ALUF; STEP; MBR -> IR, ALUR -> PC

00 0 XXX XXX XXX XXX XXX     LWA Load word address into RA (selected by A bits in PSW, default 0 -> PC, JMP abs)
                             MBR -> R[PSW5::7]; STEP
01 10 SX XXX XXX XXX 000     Branch and link relative: PC+1 -> LR, PC += #X
                             PC -> R[6], PC -> ALU0, X(sxt) -> ALU1, ADD -> ALUF; STEP; ALUR -> PC; STEP
01 10 SX XXX XXX XXX RRR     ASI Add signed immediate to Register, R != 0: R += #X 
                             R[R] -> ALU0, X(sxt) -> ALU1, ADD -> ALUF; STEP; ALUR -> R[R]; STEP
02 110 AAA CCCC BBB 000      Branch and link conditional register indexed: if C then PC+1 -> LR, A+B -> PC
                             C ? PC -> R[6], R[A] -> ALU0, R[B] -> ALU1, ADD -> ALUF; STEP; ALUR -> PC; STEP
02 110 AAA I OOO BBB DDD     Binary ALU Op: A op B -> D; I=1: A op #B -> D; AND, IOR, XOR, ADD, ADC, SUB, SBC
                             R[A] -> ALU0, I ? B : R[B]-> ALU1, O -> ALUF; STEP; ALUR -> R[D]; STEP
03 1110 AAA OOO 000 DDD      Unary ALU Op: op A -> D; NOT, CMP, TBC, TBS
                             R[A] -> ALU0, O -> ALUF; STEP; ALUR -> R[D]; STEP
03 1110 AAA OOO TTT DDD      Shift Ops (T > 0): op A, T times -> D; SHL, ASR, SLC, ARC, ROL, RLC, RAC
                             R[A] -> SFTI, T -> SFTC; STEP; SFTO -> R[D]; STEP
04 11110 D I 000 BBB XXX     Transfer PSW to memory, from memory (push, pop, see below)
                             D=0, R[B] -> ALU0, R[X] -> ALU1, ADD -> ALUF; STEP;  
                                          PSW -> MBR, ALUR -> MAR; R[X] -> ALU0; 1 -> ALU1; I ? ADD : SUB -> ALUF; STEP; ALUR -> R[X]; STEP
                             D=1: R[X] -> ALU0; 1 -> ALU1; I ? ADD : SUB -> ALUF; STEP; 
                                          ALUR -> R[X], ALUR -> ALU0, R[B] -> ALU1, ADD -> ALUF; STEP; ALUR -> MAR; STEP; MBR -> R[A]; STEP
04 11110 D I AAA BBB XXX     Transfer Register to Memory; post-inc/pre-dec; D==0: A -> M[B+X], X+=(2*I-1); D=1: X+=(2*I-1), M[B+X] -> A;  
                              ???
05 111110 D AAA BBB XXX      Transfer Register to Memory; D==0 A -> M[B+X], D=1 M[B+X] -> A
                              ???
06 1111110 CCCC SOOOO        Branch conditional relative immediate; if C then PC += #O (signed offset)
                              ???
07 11111110 BBBBBBBB         Set active bank to B
                              ???
08 111111110 AAA BBB O       Bytes Ops: op A -> B: LOW, SXT
                              ???
09 1111111110 RRR D O        Transfer Bank no. to/from R D=0: PSW & FF -> R; D=1: (PSW & FF00) | (R & FF) -> PSW
                              ???
10 11111111110 MMMM O        Modify PSW Flags (not I) O=0 CLR, O=1 SET by Mask M
                              ???
11 111111111110 IIII         Software Interrupt: M[#I] -> PC
                              IR & 0xF -> MAR; STEP; MBR -> PC; STEP
12 1111111111110 AAA         Set address register address in PSW: SAR
                              ???
13 11111111111110 OO         Ext. arithmetics: O=11: MUL: R3 * R4 -> R2::R1; O=10: MAC: R2::R1 + R3 * R4 -> R2::R1; O=0x: DIV R1::R2 / R3 -> R4, x=1 remainder in R5
                              ???
14 111111111111110 X         Enable/Disable Interrupts X=1: ENI, X=0 DIS
                              ???
15 1111111111111110          Halt, HLT
                              0 -> RUN
16 1111111111111111          No Operation, NOP
                              %

Address extension: PSW holds 8-bit bank number, LSB of Address selects bank zero or active bank

Memory map: 0x00 0x0000: Reset Vector
            0x00 0x0001: SWI 1
            ...
            0x00 0x000F: SWI 15
            ...
            0x00 0x????: Memory Mapped IO
            ---
            0x00 0x7000: Character Screen (8 bits per char + 8 bits attributes)
            0x00 0x7FFF: Top
            0x01 0x0000: Bank #1
            ...
            0xFF 0x7FFF: Top Bank #255
